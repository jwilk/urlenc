#!/usr/bin/env perl

# Copyright © 2019 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

# cwd in @INC is harmful:
# http://www.nntp.perl.org/group/perl.perl5.porters/2010/08/msg162729.html
no lib '.';

use strict;
use warnings;

use v5.10;

use English qw(-no_match_vars);

use Getopt::ArgParse;

# From RFC 3986, §2.3:
#   unreserved  = ALPHA / DIGIT / "-" / "." / "_" / "~"

my @unreserved = ('A'..'Z', 'a'..'z', '0'..'9', '-', '.', '_', '~');
my %unreserved = map { $_ => 1 } @unreserved;

my $ap = Getopt::ArgParse->new_parser();
$ap->add_args(
    ['--keep', '-k', metavar => 'CHARS', help => 'keep these characters unescaped'],
    ['--only', '-c', metavar => 'CHARS', help => 'escape only these characters'],
    ['string', nargs => '*', required => 0, help => 'string to escape'],
);
my $opts = $ap->parse_args();
my %keep = map { $_ => 1 } (split //, $opts->keep // '');
my %only = map { $_ => 1 } (split //, $opts->only // '');

sub escape
{
    my $chr = $1;
    if (%only) {
        if (not exists $only{$chr}) {
            return $chr;
        }
    } elsif (exists $unreserved{$chr} or exists $keep{$chr}) {
        return $chr;
    }
    return sprintf '%%%02X', (ord $chr);
}

if (@{$opts->string}) {
    for ($opts->string) {
        s/(.)/escape/sge;
        say;
    }
} else {
    while (<STDIN>) {
        chomp;
        s/(.)/escape/sge;
        say;
    }
}

# vim:ts=4 sts=4 sw=4 et
